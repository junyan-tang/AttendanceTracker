/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team4.UserAdminApp;

import edu.duke.ece651.team4.shared.*;

import java.io.PrintStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.InputStream;

public class App {
  final InputManager inputManager;
  final UserAdmin userAdmin;
  final LoginManager loginManager;
  final PermissionManager permissionManager;
  final PrintStream out;

  public App(InputManager inputManager, UserAdmin userAdmin, PrintStream out) {
    this.inputManager = inputManager;
    this.userAdmin = userAdmin;
    this.loginManager = new LoginManager();
    this.permissionManager = new PermissionManager();
    this.out = out;
  }

  public boolean checkAdminStatus() throws IOException {
    String prompt = "Welcome to user admin app!\n" + 
                    "If you have an account, please enter L for login.\n" + 
                    "If you don't have an account, please enter R for register";
    boolean validInput = false;
    while (!validInput) {
      String userInput = inputManager.readInput(prompt).toUpperCase();
      if (userInput == "L") {
        boolean loginSuccess = loginAdmin();
        if (loginSuccess) {
          validInput = true;
        }
        else {
          continue;
        }
      }
      else if (userInput == "R") {
        registerAdmin();
        continue;
      }
      else {
        out.println("Invalid input. Please enter L or R.");
        continue;
      }
    }
    return true;
  }

  public boolean loginAdmin() throws IOException {
    String promptNetid = "Please enter your netid.";
    String netid = inputManager.readInput(promptNetid);
    if (LoginManager.checkUserExist(netid)) {
      String promptPassword = "Please enter your password.";
      String password = inputManager.readInput(promptPassword);
      String hashedPassword = LoginManager.hashPassword(password);
      User user = userAdmin.getUser(netid);
      if (hashedPassword.equals(user.password)) {
        if (user.identity.equals("admin")) {
          return true;
        }
        else {
          out.println("You don't have admin permission!");
          return false;
        }
      }
      else {
        out.println("Wrong password!");
        return false;
      }
    }
    else {
      out.println("Account not found!");
      return false;
    }
  }

  public boolean registerAdmin() throws IOException {
    String promptNetid = "Please enter your netid.";
    String netid = inputManager.readInput(promptNetid);
    if (LoginManager.checkUserExist(netid)) {
      if (userAdmin.getUser(netid).identity == "admin") {
        out.println("You already have an admin account.");
        return false;
      }
      else {
        out.println("You don't have admin permission.");
        return false;
      }
    }
    String promptPassword = "Please enter your password.";
    String password = inputManager.readInput(promptPassword);
    String hashedPassword = LoginManager.hashPassword(password);
    userAdmin.addAdminUser(netid, hashedPassword);
    return true;
  }

  public String permissionCheck() throws IOException {
    String status = "";
    if (!permissionManager.checkTableExist()) {
      status = inputManager.readFile();
      permissionManager.createTable(status);
    }
    else {
      status = permissionManager.getStatus();
    }
    return status;
  }

  public static void main(String[] args) throws IOException {
    BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
    InputStream is = InputProcess.class.getResourceAsStream("/NameChange.txt");
    BufferedReader fileReader = new BufferedReader(new InputStreamReader(is));
    InputManager inputManager = new InputProcess(fileReader, inputReader, System.out);
    UserAdmin userAdmin = new UserAdmin(inputManager, System.out);
    PrintStream out = System.out;
    App app = new App(inputManager, userAdmin, out);

    // check and set the permission of name change
    String permission = app.permissionCheck();
    userAdmin.setPermission(permission);

    // check admin registration or login
    app.checkAdminStatus();
    
    // choose action
    boolean finishAction = false;
    while (!finishAction) {
      out.println("Hello User Admin! What do you want to do?");
      out.println("1. add a new user");
      out.println("2. remove a user");
      out.println("3. update user information");
      out.println("4. logout");
      String promptChoice = "Please enter your choice (1, 2, 3 or 4):";

      String choice = inputManager.readInput(promptChoice);
      switch (choice) {
        case "1":
          // add a new user
          String promptIdentity = "Which type of user do you want to add? Enter S for student and P for Professor.";
          String identity = inputManager.readInput(promptIdentity).toUpperCase();
          boolean validIdent = false;
          while (!validIdent) {
            if (identity == "PROFESSOR") {
              userAdmin.addUser("professor");
              validIdent = true;
            }
            else if (identity == "STUDENT") {
              userAdmin.addUser("student");
              validIdent = true;
            }
            else {
              out.println("Invalid type. Please choose again.");
              continue;
            }
          }
          break;
        case "2":
          // remove a user
          userAdmin.updateUser();
          break;
        case "3":
          // update user information
          userAdmin.updateUser();
          break;
        case "4":
          // logout
          out.println("Logging out...");
          finishAction = true;
        default:
          out.println("Invalid input. Please enter 1, 2, 3 or 4.");
          continue;
      }
    }
  }
}